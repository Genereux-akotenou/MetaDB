{"chunk_id": "3565461529237368063_0", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "A tool designed to provide ultrafast all-in-one preprocessing and quality control for FastQ data.\n\nThis tool is designed for processing short reads (i.e. Illumina NovaSeq, MGI), if you are looking for tools to process long reads (i.e. Nanopore, PacBio, Cyclone), please use fastplong.\n\nfastp supports batch processing of multiple FASTQ files in a folder, see - batch processing\n\n- features\n- simple usage\n- examples of report\n- get fastp\n- input and output\n- filtering\n- adapters\n- per read cutting by quality score\n- base correction for PE data\n- global trimming\n- polyG tail trimming\n- polyX tail trimming\n- unique molecular identifier (UMI) processing\n- output splitting\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./"}
{"chunk_id": "3565461529237368063_160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can"}
{"chunk_id": "3565461529237368063_320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install"}
{"chunk_id": "3565461529237368063_480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--"}
{"chunk_id": "3565461529237368063_640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie"}
{"chunk_id": "3565461529237368063_800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read"}
{"chunk_id": "3565461529237368063_960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read"}
{"chunk_id": "3565461529237368063_1120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n."}
{"chunk_id": "3565461529237368063_1280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength"}
{"chunk_id": "3565461529237368063_1440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its"}
{"chunk_id": "3565461529237368063_1600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data,"}
{"chunk_id": "3565461529237368063_1760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences"}
{"chunk_id": "3565461529237368063_1920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data."}
{"chunk_id": "3565461529237368063_2080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or"}
{"chunk_id": "3565461529237368063_2240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And"}
{"chunk_id": "3565461529237368063_2400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window"}
{"chunk_id": "3565461529237368063_2560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1"}
{"chunk_id": "3565461529237368063_2720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `"}
{"chunk_id": "3565461529237368063_2880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window"}
{"chunk_id": "3565461529237368063_3040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap"}
{"chunk_id": "3565461529237368063_3200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim"}
{"chunk_id": "3565461529237368063_3360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ", this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fast"}
{"chunk_id": "3565461529237368063_3520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n"}
{"chunk_id": "3565461529237368063_3680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq"}
{"chunk_id": "3565461529237368063_3840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e"}
{"chunk_id": "3565461529237368063_4000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI"}
{"chunk_id": "3565461529237368063_4160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "p`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2"}
{"chunk_id": "3565461529237368063_4320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For"}
{"chunk_id": "3565461529237368063_4480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAG"}
{"chunk_id": "3565461529237368063_4640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCC"}
{"chunk_id": "3565461529237368063_4800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d"}
{"chunk_id": "3565461529237368063_4960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S"}
{"chunk_id": "3565461529237368063_5120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by"}
{"chunk_id": "3565461529237368063_5280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nsh"}
{"chunk_id": "3565461529237368063_5440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "AGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`"}
{"chunk_id": "3565461529237368063_5600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1"}
{"chunk_id": "3565461529237368063_5760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10"}
{"chunk_id": "3565461529237368063_5920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more"}
{"chunk_id": "3565461529237368063_6080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24"}
{"chunk_id": "3565461529237368063_6240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f"}
{"chunk_id": "3565461529237368063_6400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n"}
{"chunk_id": "3565461529237368063_6560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overl"}
{"chunk_id": "3565461529237368063_6720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the"}
{"chunk_id": "3565461529237368063_6880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to"}
{"chunk_id": "3565461529237368063_7040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is"}
{"chunk_id": "3565461529237368063_7200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail"}
{"chunk_id": "3565461529237368063_7360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "apped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long"}
{"chunk_id": "3565461529237368063_7520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g"}
{"chunk_id": "3565461529237368063_7680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if"}
{"chunk_id": "3565461529237368063_7840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int"}
{"chunk_id": "3565461529237368063_8000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [="}
{"chunk_id": "3565461529237368063_8160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair"}
{"chunk_id": "3565461529237368063_8320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means "}
{"chunk_id": "3565461529237368063_8480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap"}
{"chunk_id": "3565461529237368063_8640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none ("}
{"chunk_id": "3565461529237368063_8800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default"}
{"chunk_id": "3565461529237368063_8960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split"}
{"chunk_id": "3565461529237368063_9120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "3565461529237368063_9280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "3565461529237368063_9440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "694928490245928002_0", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "A tool designed to provide ultrafast all-in-one preprocessing and quality control for FastQ data.\n\nThis tool is designed for processing short reads (i.e. Illumina NovaSeq, MGI), if you are looking for tools to process long reads (i.e. Nanopore, PacBio, Cyclone), please use fastplong.\n\nfastp supports batch processing of multiple FASTQ files in a folder, see - batch processing\n\n- features\n- simple usage\n- examples of report\n- get fastp\n- input and output\n- filtering\n- adapters\n- per read cutting by quality score\n- base correction for PE data\n- global trimming\n- polyG tail trimming\n- polyX tail trimming\n- unique molecular identifier (UMI) processing\n- output splitting\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./"}
{"chunk_id": "694928490245928002_160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can"}
{"chunk_id": "694928490245928002_320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install"}
{"chunk_id": "694928490245928002_480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--"}
{"chunk_id": "694928490245928002_640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie"}
{"chunk_id": "694928490245928002_800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read"}
{"chunk_id": "694928490245928002_960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read"}
{"chunk_id": "694928490245928002_1120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n."}
{"chunk_id": "694928490245928002_1280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength"}
{"chunk_id": "694928490245928002_1440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its"}
{"chunk_id": "694928490245928002_1600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data,"}
{"chunk_id": "694928490245928002_1760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences"}
{"chunk_id": "694928490245928002_1920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data."}
{"chunk_id": "694928490245928002_2080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or"}
{"chunk_id": "694928490245928002_2240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And"}
{"chunk_id": "694928490245928002_2400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window"}
{"chunk_id": "694928490245928002_2560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1"}
{"chunk_id": "694928490245928002_2720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `"}
{"chunk_id": "694928490245928002_2880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window"}
{"chunk_id": "694928490245928002_3040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap"}
{"chunk_id": "694928490245928002_3200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim"}
{"chunk_id": "694928490245928002_3360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ", this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fast"}
{"chunk_id": "694928490245928002_3520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n"}
{"chunk_id": "694928490245928002_3680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq"}
{"chunk_id": "694928490245928002_3840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e"}
{"chunk_id": "694928490245928002_4000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI"}
{"chunk_id": "694928490245928002_4160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "p`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2"}
{"chunk_id": "694928490245928002_4320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For"}
{"chunk_id": "694928490245928002_4480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAG"}
{"chunk_id": "694928490245928002_4640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCC"}
{"chunk_id": "694928490245928002_4800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d"}
{"chunk_id": "694928490245928002_4960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S"}
{"chunk_id": "694928490245928002_5120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by"}
{"chunk_id": "694928490245928002_5280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nsh"}
{"chunk_id": "694928490245928002_5440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "AGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`"}
{"chunk_id": "694928490245928002_5600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1"}
{"chunk_id": "694928490245928002_5760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10"}
{"chunk_id": "694928490245928002_5920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more"}
{"chunk_id": "694928490245928002_6080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24"}
{"chunk_id": "694928490245928002_6240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f"}
{"chunk_id": "694928490245928002_6400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n"}
{"chunk_id": "694928490245928002_6560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overl"}
{"chunk_id": "694928490245928002_6720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the"}
{"chunk_id": "694928490245928002_6880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to"}
{"chunk_id": "694928490245928002_7040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is"}
{"chunk_id": "694928490245928002_7200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail"}
{"chunk_id": "694928490245928002_7360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "apped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long"}
{"chunk_id": "694928490245928002_7520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g"}
{"chunk_id": "694928490245928002_7680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if"}
{"chunk_id": "694928490245928002_7840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int"}
{"chunk_id": "694928490245928002_8000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [="}
{"chunk_id": "694928490245928002_8160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair"}
{"chunk_id": "694928490245928002_8320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means "}
{"chunk_id": "694928490245928002_8480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap"}
{"chunk_id": "694928490245928002_8640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none ("}
{"chunk_id": "694928490245928002_8800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default"}
{"chunk_id": "694928490245928002_8960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split"}
{"chunk_id": "694928490245928002_9120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "694928490245928002_9280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "694928490245928002_9440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "694928490245928002_0", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "A tool designed to provide ultrafast all-in-one preprocessing and quality control for FastQ data.\n\nThis tool is designed for processing short reads (i.e. Illumina NovaSeq, MGI), if you are looking for tools to process long reads (i.e. Nanopore, PacBio, Cyclone), please use fastplong.\n\nfastp supports batch processing of multiple FASTQ files in a folder, see - batch processing\n\n- features\n- simple usage\n- examples of report\n- get fastp\n- input and output\n- filtering\n- adapters\n- per read cutting by quality score\n- base correction for PE data\n- global trimming\n- polyG tail trimming\n- polyX tail trimming\n- unique molecular identifier (UMI) processing\n- output splitting\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./"}
{"chunk_id": "694928490245928002_160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can"}
{"chunk_id": "694928490245928002_320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install"}
{"chunk_id": "694928490245928002_480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--"}
{"chunk_id": "694928490245928002_640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie"}
{"chunk_id": "694928490245928002_800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read"}
{"chunk_id": "694928490245928002_960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read"}
{"chunk_id": "694928490245928002_1120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n."}
{"chunk_id": "694928490245928002_1280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength"}
{"chunk_id": "694928490245928002_1440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its"}
{"chunk_id": "694928490245928002_1600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data,"}
{"chunk_id": "694928490245928002_1760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences"}
{"chunk_id": "694928490245928002_1920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data."}
{"chunk_id": "694928490245928002_2080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or"}
{"chunk_id": "694928490245928002_2240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And"}
{"chunk_id": "694928490245928002_2400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window"}
{"chunk_id": "694928490245928002_2560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1"}
{"chunk_id": "694928490245928002_2720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `"}
{"chunk_id": "694928490245928002_2880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window"}
{"chunk_id": "694928490245928002_3040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap"}
{"chunk_id": "694928490245928002_3200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim"}
{"chunk_id": "694928490245928002_3360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ", this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fast"}
{"chunk_id": "694928490245928002_3520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n"}
{"chunk_id": "694928490245928002_3680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq"}
{"chunk_id": "694928490245928002_3840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e"}
{"chunk_id": "694928490245928002_4000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI"}
{"chunk_id": "694928490245928002_4160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "p`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2"}
{"chunk_id": "694928490245928002_4320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For"}
{"chunk_id": "694928490245928002_4480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAG"}
{"chunk_id": "694928490245928002_4640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCC"}
{"chunk_id": "694928490245928002_4800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d"}
{"chunk_id": "694928490245928002_4960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S"}
{"chunk_id": "694928490245928002_5120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by"}
{"chunk_id": "694928490245928002_5280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nsh"}
{"chunk_id": "694928490245928002_5440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "AGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`"}
{"chunk_id": "694928490245928002_5600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1"}
{"chunk_id": "694928490245928002_5760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10"}
{"chunk_id": "694928490245928002_5920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more"}
{"chunk_id": "694928490245928002_6080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24"}
{"chunk_id": "694928490245928002_6240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f"}
{"chunk_id": "694928490245928002_6400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n"}
{"chunk_id": "694928490245928002_6560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overl"}
{"chunk_id": "694928490245928002_6720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the"}
{"chunk_id": "694928490245928002_6880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to"}
{"chunk_id": "694928490245928002_7040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is"}
{"chunk_id": "694928490245928002_7200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail"}
{"chunk_id": "694928490245928002_7360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "apped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long"}
{"chunk_id": "694928490245928002_7520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g"}
{"chunk_id": "694928490245928002_7680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if"}
{"chunk_id": "694928490245928002_7840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int"}
{"chunk_id": "694928490245928002_8000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [="}
{"chunk_id": "694928490245928002_8160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair"}
{"chunk_id": "694928490245928002_8320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means "}
{"chunk_id": "694928490245928002_8480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap"}
{"chunk_id": "694928490245928002_8640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none ("}
{"chunk_id": "694928490245928002_8800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default"}
{"chunk_id": "694928490245928002_8960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split"}
{"chunk_id": "694928490245928002_9120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "694928490245928002_9280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "694928490245928002_9440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "2734403406345745841_0", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "A tool designed to provide ultrafast all-in-one preprocessing and quality control for FastQ data.\n\nThis tool is designed for processing short reads (i.e. Illumina NovaSeq, MGI), if you are looking for tools to process long reads (i.e. Nanopore, PacBio, Cyclone), please use fastplong.\n\nfastp supports batch processing of multiple FASTQ files in a folder, see - batch processing\n\n- features\n- simple usage\n- examples of report\n- get fastp\n- input and output\n- filtering\n- adapters\n- per read cutting by quality score\n- base correction for PE data\n- global trimming\n- polyG tail trimming\n- polyX tail trimming\n- unique molecular identifier (UMI) processing\n- output splitting\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./"}
{"chunk_id": "2734403406345745841_160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can"}
{"chunk_id": "2734403406345745841_320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install"}
{"chunk_id": "2734403406345745841_480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--"}
{"chunk_id": "2734403406345745841_640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie"}
{"chunk_id": "2734403406345745841_800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read"}
{"chunk_id": "2734403406345745841_960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read"}
{"chunk_id": "2734403406345745841_1120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n."}
{"chunk_id": "2734403406345745841_1280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength"}
{"chunk_id": "2734403406345745841_1440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its"}
{"chunk_id": "2734403406345745841_1600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data,"}
{"chunk_id": "2734403406345745841_1760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences"}
{"chunk_id": "2734403406345745841_1920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data."}
{"chunk_id": "2734403406345745841_2080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or"}
{"chunk_id": "2734403406345745841_2240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And"}
{"chunk_id": "2734403406345745841_2400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window"}
{"chunk_id": "2734403406345745841_2560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1"}
{"chunk_id": "2734403406345745841_2720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `"}
{"chunk_id": "2734403406345745841_2880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window"}
{"chunk_id": "2734403406345745841_3040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap"}
{"chunk_id": "2734403406345745841_3200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim"}
{"chunk_id": "2734403406345745841_3360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ", this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fast"}
{"chunk_id": "2734403406345745841_3520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n"}
{"chunk_id": "2734403406345745841_3680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq"}
{"chunk_id": "2734403406345745841_3840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e"}
{"chunk_id": "2734403406345745841_4000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI"}
{"chunk_id": "2734403406345745841_4160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "p`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2"}
{"chunk_id": "2734403406345745841_4320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For"}
{"chunk_id": "2734403406345745841_4480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAG"}
{"chunk_id": "2734403406345745841_4640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCC"}
{"chunk_id": "2734403406345745841_4800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d"}
{"chunk_id": "2734403406345745841_4960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S"}
{"chunk_id": "2734403406345745841_5120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by"}
{"chunk_id": "2734403406345745841_5280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nsh"}
{"chunk_id": "2734403406345745841_5440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "AGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`"}
{"chunk_id": "2734403406345745841_5600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1"}
{"chunk_id": "2734403406345745841_5760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10"}
{"chunk_id": "2734403406345745841_5920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more"}
{"chunk_id": "2734403406345745841_6080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24"}
{"chunk_id": "2734403406345745841_6240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f"}
{"chunk_id": "2734403406345745841_6400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n"}
{"chunk_id": "2734403406345745841_6560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overl"}
{"chunk_id": "2734403406345745841_6720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the"}
{"chunk_id": "2734403406345745841_6880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to"}
{"chunk_id": "2734403406345745841_7040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is"}
{"chunk_id": "2734403406345745841_7200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail"}
{"chunk_id": "2734403406345745841_7360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "apped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long"}
{"chunk_id": "2734403406345745841_7520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g"}
{"chunk_id": "2734403406345745841_7680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if"}
{"chunk_id": "2734403406345745841_7840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int"}
{"chunk_id": "2734403406345745841_8000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [="}
{"chunk_id": "2734403406345745841_8160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair"}
{"chunk_id": "2734403406345745841_8320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means "}
{"chunk_id": "2734403406345745841_8480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap"}
{"chunk_id": "2734403406345745841_8640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none ("}
{"chunk_id": "2734403406345745841_8800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default"}
{"chunk_id": "2734403406345745841_8960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split"}
{"chunk_id": "2734403406345745841_9120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "2734403406345745841_9280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "2734403406345745841_9440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "2734403406345745841_0", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "A tool designed to provide ultrafast all-in-one preprocessing and quality control for FastQ data.\n\nThis tool is designed for processing short reads (i.e. Illumina NovaSeq, MGI), if you are looking for tools to process long reads (i.e. Nanopore, PacBio, Cyclone), please use fastplong.\n\nfastp supports batch processing of multiple FASTQ files in a folder, see - batch processing\n\n- features\n- simple usage\n- examples of report\n- get fastp\n- input and output\n- filtering\n- adapters\n- per read cutting by quality score\n- base correction for PE data\n- global trimming\n- polyG tail trimming\n- polyX tail trimming\n- unique molecular identifier (UMI) processing\n- output splitting\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./"}
{"chunk_id": "2734403406345745841_160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can"}
{"chunk_id": "2734403406345745841_320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install"}
{"chunk_id": "2734403406345745841_480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--"}
{"chunk_id": "2734403406345745841_640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie"}
{"chunk_id": "2734403406345745841_800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read"}
{"chunk_id": "2734403406345745841_960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read"}
{"chunk_id": "2734403406345745841_1120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n."}
{"chunk_id": "2734403406345745841_1280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength"}
{"chunk_id": "2734403406345745841_1440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its"}
{"chunk_id": "2734403406345745841_1600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data,"}
{"chunk_id": "2734403406345745841_1760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences"}
{"chunk_id": "2734403406345745841_1920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data."}
{"chunk_id": "2734403406345745841_2080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or"}
{"chunk_id": "2734403406345745841_2240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And"}
{"chunk_id": "2734403406345745841_2400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window"}
{"chunk_id": "2734403406345745841_2560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1"}
{"chunk_id": "2734403406345745841_2720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `"}
{"chunk_id": "2734403406345745841_2880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window"}
{"chunk_id": "2734403406345745841_3040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap"}
{"chunk_id": "2734403406345745841_3200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim"}
{"chunk_id": "2734403406345745841_3360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ", this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fast"}
{"chunk_id": "2734403406345745841_3520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n"}
{"chunk_id": "2734403406345745841_3680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq"}
{"chunk_id": "2734403406345745841_3840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e"}
{"chunk_id": "2734403406345745841_4000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI"}
{"chunk_id": "2734403406345745841_4160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "p`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2"}
{"chunk_id": "2734403406345745841_4320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For"}
{"chunk_id": "2734403406345745841_4480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAG"}
{"chunk_id": "2734403406345745841_4640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCC"}
{"chunk_id": "2734403406345745841_4800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d"}
{"chunk_id": "2734403406345745841_4960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S"}
{"chunk_id": "2734403406345745841_5120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by"}
{"chunk_id": "2734403406345745841_5280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nsh"}
{"chunk_id": "2734403406345745841_5440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "AGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`"}
{"chunk_id": "2734403406345745841_5600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1"}
{"chunk_id": "2734403406345745841_5760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10"}
{"chunk_id": "2734403406345745841_5920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more"}
{"chunk_id": "2734403406345745841_6080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24"}
{"chunk_id": "2734403406345745841_6240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f"}
{"chunk_id": "2734403406345745841_6400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n"}
{"chunk_id": "2734403406345745841_6560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overl"}
{"chunk_id": "2734403406345745841_6720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the"}
{"chunk_id": "2734403406345745841_6880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to"}
{"chunk_id": "2734403406345745841_7040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is"}
{"chunk_id": "2734403406345745841_7200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail"}
{"chunk_id": "2734403406345745841_7360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "apped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long"}
{"chunk_id": "2734403406345745841_7520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g"}
{"chunk_id": "2734403406345745841_7680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if"}
{"chunk_id": "2734403406345745841_7840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int"}
{"chunk_id": "2734403406345745841_8000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [="}
{"chunk_id": "2734403406345745841_8160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair"}
{"chunk_id": "2734403406345745841_8320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means "}
{"chunk_id": "2734403406345745841_8480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap"}
{"chunk_id": "2734403406345745841_8640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none ("}
{"chunk_id": "2734403406345745841_8800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default"}
{"chunk_id": "2734403406345745841_8960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split"}
{"chunk_id": "2734403406345745841_9120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "2734403406345745841_9280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "2734403406345745841_9440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "2734403406345745841_0", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "A tool designed to provide ultrafast all-in-one preprocessing and quality control for FastQ data.\n\nThis tool is designed for processing short reads (i.e. Illumina NovaSeq, MGI), if you are looking for tools to process long reads (i.e. Nanopore, PacBio, Cyclone), please use fastplong.\n\nfastp supports batch processing of multiple FASTQ files in a folder, see - batch processing\n\n- features\n- simple usage\n- examples of report\n- get fastp\n- input and output\n- filtering\n- adapters\n- per read cutting by quality score\n- base correction for PE data\n- global trimming\n- polyG tail trimming\n- polyX tail trimming\n- unique molecular identifier (UMI) processing\n- output splitting\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./"}
{"chunk_id": "2734403406345745841_160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "\n- overrepresented sequence analysis\n- merge paired-end reads\n- duplication rate and deduplication\n- batch processing\n- all options\n- citations\n\n- comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...)\n- filter out bad reads (too low quality, too short, or too many N...)\n- cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).\n- trim all reads in front and tail\n- cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.\n- correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can"}
{"chunk_id": "2734403406345745841_320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality\n- trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data)\n- preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.\n- report JSON format result for further interpreting.\n- visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).\n- split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install"}
{"chunk_id": "2734403406345745841_480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " split file number, or limitting the lines of each split file.\n- support long reads (data from PacBio / Nanopore devices).\n- support reading from STDIN and writing to STDOUT\n- support interleaved input\n- support ultra-fast FASTQ-level deduplication\n- ...\n\nIf you find a bug or have additional requirement for `fastp`\n\n, please file an issue:https://github.com/OpenGene/fastp/issues/new\n\n- for single end data (not compressed)\n\n```\nfastp -i in.fq -o out.fq\n```\n\n\n- for paired end data (gzip compressed)\n\n```\nfastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--"}
{"chunk_id": "2734403406345745841_640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".gz\n```\n\n\nBy default, the HTML report is saved to `fastp.html`\n\n(can be specified with `-h`\n\noption), and the JSON report is saved to `fastp.json`\n\n(can be specified with `-j`\n\noption).\n\n`fastp`\n\ncreates reports in both HTML and JSON format.\n\n- HTML report: http://opengene.org/fastp/fastp.html\n- JSON report: http://opengene.org/fastp/fastp.json\n\n```\n# note: the fastp version in bioconda may be not the latest\nconda install -c bioconda fastp\n```\n\nThis binary was compiled on CentOS, and tested on CentOS/Ubuntu\n\n```\n# download the latest build\nwget http://opengene.org/fastp/fastp\nchmod a+x ./fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie"}
{"chunk_id": "2734403406345745841_800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "fastp\n# or download specified version, i.e. fastp v0.23.4\nwget http://opengene.org/fastp/fastp.0.23.4\nmv fastp.0.23.4 fastp\nchmod a+x ./fastp\n```\n\n`fastp`\n\ndepends on `libdeflate`\n\nand `libisal`\n\n, while `libisal`\n\nis not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp.\n\nIt's recommended that to install it using your package manager, for example `apt install isa-l`\n\non ubuntu, or `brew install isa-l`\n\non Mac. Otherwise you can compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read"}
{"chunk_id": "2734403406345745841_960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " compile it from source. Please be noted that `isa-l`\n\nis not compatible with gcc 4.8 or older versions. See https://github.com/intel/isa-l\n`autoconf`\n\n, `automake`\n\n, `libtools`\n\n, `nasm (>=2.11.01)`\n\nand `yasm (>=1.2.0)`\n\nare required to build isa-l.\n\n```\ngit clone https://github.com/intel/isa-l.git\ncd isa-l\n./autogen.sh\n./configure --prefix=/usr --libdir=/usr/lib64\nmake -j\nsudo make install\n```\n\nIt's recommended that to install it using your package manager, for example `apt install libdeflate`\n\non ubuntu, or `brew install libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read"}
{"chunk_id": "2734403406345745841_1120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " libdeflate`\n\non Mac. Otherwise you can compile it from source. See https://github.com/ebiggers/libdeflate\n\n```\ngit clone https://github.com/ebiggers/libdeflate.git\ncd libdeflate\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\n```\n# get source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/fastp.git\n# build\ncd fastp\nmake -j\n# Install\nsudo make install\n```\n\n`fastp`\n\nsupports both single-end (SE) and paired-end (PE) input/output.\n\n- for SE data, you only have to specify read1 input by\n`-i`\n\nor`--in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n."}
{"chunk_id": "2734403406345745841_1280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "in1`\n\n, and specify read1 output by`-o`\n\nor`--out1`\n\n. - for PE data, you should also specify read2 input by\n`-I`\n\nor`--in2`\n\n, and specify read2 output by`-O`\n\nor`--out2`\n\n. - if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.\n- the output will be gzip-compressed if its file name ends with\n`.gz`\n\n\n`fastp`\n\nsupports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`\n\n, or be passed to aligners like `bwa`\n\nand `bowtie2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength"}
{"chunk_id": "2734403406345745841_1440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2`\n\n.\n\n- specify\n`--stdout`\n\nto enable this mode to stream output to STDOUT - for PE data, the output will be interleaved FASTQ, which means the output will contain records like\n`record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ...`\n\n\n- specify\n`--stdin`\n\nif you want to read the STDIN for processing. - if the STDIN is an interleaved paired-end stream, specify\n`--interleaved_in`\n\nto indicate that.\n\n- you can specify\n`--unpaired1`\n\nto store the reads that read1 passes filters but its paired read2 doesn't, as well as`--unpaired2`\n\nfor unpaired read2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its"}
{"chunk_id": "2734403406345745841_1600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "2. `--unpaired1`\n\nand`--unpaired2`\n\ncan be the same, so the unpaired read1/read2 will be written to the same single file.\n\n- give\n`--failed_out`\n\nto specify the file name to store the failed reads. - if one read failed and is written to\n`--failed_out`\n\n, its`failure reason`\n\nwill be appended to its read name. For example,`failed_quality_filter`\n\n,`failed_too_short`\n\netc. - for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the\n`failure reason`\n\nwill be`paired_read_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data,"}
{"chunk_id": "2734403406345745841_1760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_is_failing`\n\n.\n\nIf you don't want to process all the data, you can specify `--reads_to_process`\n\nto limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.\n\nYou can enable the option `--dont_overwrite`\n\nto protect the existing files not to be overwritten by `fastp`\n\n. In this case, `fastp`\n\nwill report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.\n\nSee output splitting\n\nMultiple filters have been implemented.\n\nQuality filtering is enabled by default, but you can disable it by `-Q`\n\nor `disable_quality_filtering`\n\n. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences"}
{"chunk_id": "2734403406345745841_1920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`\n\n), and the percentage of unqualified bases.\n\nTo filter reads by its percentage of unqualified bases, two options should be provided:\n\n`-q, --qualified_quality_phred`\n\nthe quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.`-u, --unqualified_percent_limit`\n\nhow many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%\n\nYou can also filter reads by its average quality score\n\n`-e, --average_qual`\n\nif one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n\nLength filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data."}
{"chunk_id": "2734403406345745841_2080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " filtering is enabled by default, but you can disable it by `-L`\n\nor `--disable_length_filtering`\n\n. The minimum length requirement is specified with `-l`\n\nor `--length_required`\n\n.\n\nFor some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit`\n\nto discard the reads longer than `length_limit`\n\n. The default value 0 means no limitation.\n\nLow complexity filter is disabled by default, and you can enable it by `-y`\n\nor `--low_complexity_filter`\n\n. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:\n\n```\n# a 51-bp sequence, with 3 bases that is different from its next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or"}
{"chunk_id": "2734403406345745841_2240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " next base\nseq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'\ncomplexity = 3/(51-1) = 6%\n```\n\n\nThe threshold for low complexity filter can be specified by `-Y`\n\nor `--complexity_threshold`\n\n. It's range should be `0~100`\n\n, and its default value is 30, which means 30% complexity is required.\n\nNew filters are being implemented. If you have a new idea or new request, please file an issue.\n\nAdapter trimming is enabled by default, but you can disable it by `-A`\n\nor `--disable_adapter_trimming`\n\n. Adapter sequences can be automatically detected for both PE/SE data.\n\n- For SE data, the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And"}
{"chunk_id": "2734403406345745841_2400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " the adapter can be detected for most cases, but if\n`fastp`\n\nfailed to find the adapter sequence, you can specify it by`-a`\n\nor`--adapter_sequence`\n\noption. If adapter sequence is specified, the auto detection is disabled. - For PE data, the adapters can be trimmed automatically by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence. But you can still specify the adapter sequences for read1 by\n`--adapter_sequence`\n\n, and for read2 by`--adapter_sequence_r2`\n\n. In case`fastp`\n\nfails to find an overlap for some pairs (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window"}
{"chunk_id": "2734403406345745841_2560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " to trim adapters for read1 and read2 respectively. - For PE data, the auto adapter detection is disabled by default. You can enable it by specifing\n`-2`\n\nor`--detect_adapter_for_pe`\n\n. If you want to obtain ultra-clean data, this option is strongly suggested. - For PE data,\n`fastp`\n\nwill run a little slower if you specify the sequence adapters or enable the adapter auto-detection. But it may result in a slightly cleaner output (usually finds 0.1% to 0.5% more adapters), since the overlap analysis may fail due to sequencing errors. - For PE data, you can specify\n`--allow_gap_overlap_trimming`\n\nto allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1"}
{"chunk_id": "2734403406345745841_2720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " By default no gap is allowed. This may take more time and usually have very limited effect (finds ~0.01% more adapters). - The most widely used adapters are Illumina TruSeq adapters. If your data is from the TruSeq library,\n`fastp`\n\nshould be able to detect it successfully, otherwise you can add`--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT`\n\nto your command lines. `fastp`\n\ncontains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue or make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `"}
{"chunk_id": "2734403406345745841_2880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " make a change in https://github.com/OpenGene/fastp/blob/master/src/knownadapters.h\n\nYou can also specify `--adapter_fasta`\n\nto give a FASTA file to tell `fastp`\n\nto trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:\n\n```\n>Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n>Illumina TruSeq Adapter Read 2\nAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\n>polyA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n\nThe adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window"}
{"chunk_id": "2734403406345745841_3040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA).\n\n`fastp`\n\nfirst trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`\n\n, then trims the adapters given by `--adapter_fasta`\n\none by one.\n\nThe sequence distribution of trimmed adapters can be found at the HTML/JSON reports.\n\n`fastp`\n\nsupports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`\n\n, `fastp`\n\nsupports 3 different operations, and you enable one or all of them:\n\n`-5, --cut_front`\n\nmove a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap"}
{"chunk_id": "2734403406345745841_3200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use`cut_front_window_size`\n\nto set the widnow size, and`cut_front_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`LEADING`\n\nmethod.`-3, --cut_tail`\n\nmove a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use`cut_tail_window_size`\n\nto set the widnow size, and`cut_tail_mean_quality`\n\nto set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim"}
{"chunk_id": "2734403406345745841_3360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ", this is similar as the Trimmomatic`TRAILING`\n\nmethod.`-r, --cut_right`\n\nmove a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use`cut_right_window_size`\n\nto set the widnow size, and`cut_right_mean_quality`\n\nto set the mean quality threshold. This is similar as the Trimmomatic`SLIDINGWINDOW`\n\nmethod.\n\n**WARNING: all these three operations will interfere deduplication for SE data, and --cut_front or --cut_right may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.**\n\n\nIf `--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fast"}
{"chunk_id": "2734403406345745841_3520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--cut_right`\n\nis enabled, then there is no need to enable `--cut_tail`\n\n, since the former is more aggressive. If `--cut_right`\n\nis enabled together with `--cut_front`\n\n, `--cut_front`\n\nwill be performed first before `--cut_right`\n\nto avoid dropping whole reads due to the low quality starting bases.\n\nPlease be noted that `--cut_front`\n\nwill interfere deduplication for both PE/SE data, and `--cut_tail`\n\nwill interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.\n\nIf you don't set window size and mean quality threshold for these function respectively, `fastp`\n\nwill use the values from `-W, --cut_window_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n"}
{"chunk_id": "2734403406345745841_3680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_size`\n\nand `-M, --cut_mean_quality `\n\n\n`fastp`\n\nperform `overlap analysis`\n\nfor PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.\n\nThis function is not enabled by default, specify `-c`\n\nor `--correction`\n\nto enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq"}
{"chunk_id": "2734403406345745841_3840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\n`fastp`\n\nsupports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run.\n\nFor example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1`\n\nor `--trim_tail1=1`\n\noption.\n\n- For read1 or SE data, the front/tail trimming settings are given with\n`-f, --trim_front1`\n\nand`-t, --trim_tail1`\n\n. - For read2 of PE data, the front/tail trimming settings are given with\n`-F, --trim_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e"}
{"chunk_id": "2734403406345745841_4000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "_front2`\n\nand`-T, --trim_tail2`\n\n. But if these options are not specified, they will be as same as read1 options, which means`trim_front2 = trim_front1`\n\nand`trim_tail2 = trim_tail1`\n\n. - If you want to trim the reads to maximum length, you can specify\n`-b, --max_len1`\n\nfor read1, and`-B, --max_len2`\n\nfor read2. If`--max_len1`\n\nis specified but`--max_len2`\n\nis not,`--max_len2`\n\nwill be same as`--max_len1`\n\n. For example, if`--max_len1`\n\nis specified and read1 is longer than`--max_len1`\n\n,`fastp`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI"}
{"chunk_id": "2734403406345745841_4160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "p`\n\nwill trim read1 at its tail to make it as long as`--max_len1`\n\n.\n\nPlease note that the trimming for `--max_len`\n\nlimitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:\n\n```\n1, UMI preprocessing (--umi)\n2, global trimming at front (--trim_front)\n3, global trimming at tail (--trim_tail)\n4, quality pruning at 5' (--cut_front)\n5, quality pruning by sliding window (--cut_right)\n6, quality pruning at 3' (--cut_tail)\n7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data)\n8, trim adapter by overlap analysis (enabled by default for PE data)\n9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2"}
{"chunk_id": "2734403406345745841_4320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded)\n10, trim polyX (--trim_poly_x)\n11, trim to max length (---max_len)\n```\n\n\nFor Illumina NextSeq/NovaSeq data, `polyG`\n\ncan happen in read tails since `G`\n\nmeans no signal in the Illumina two-color systems. `fastp`\n\ncan detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g`\n\nor `--trim_poly_g`\n\nto enable it for any data, or specify `-G`\n\nor `--disable_trim_poly_g`\n\nto disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For"}
{"chunk_id": "2734403406345745841_4480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " data is detected by the machine ID in the FASTQ records.\n\nA minimum length can be set with `<poly_g_min_len>`\n\nfor `fastp`\n\nto detect polyG. This value is 10 by default.\n\nThis feature is similar as polyG tail trimming, but is disabled by default. Use `-x`\n\nor `--trim_poly_x`\n\nto enable it. A minimum length can be set with `<poly_x_min_len>`\n\nfor `fastp`\n\nto detect polyX. This value is 10 by default.\n\nWhen `polyG tail trimming`\n\nand `polyX tail trimming`\n\nare both enabled, fastp will perform `polyG trimming`\n\nfirst, then perform `polyX trimming`\n\n. This setting is useful for trimming the tails having `polyX (i.e. polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAG"}
{"chunk_id": "2734403406345745841_4640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". polyA) `\n\nbefore `polyG`\n\n. `polyG`\n\nis usually caused by sequencing artifacts, while `polyA`\n\ncan be commonly found from the tails of mRNA-Seq reads.\n\nUMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index`\n\nor head of `read`\n\n.\nTo enable UMI processing, you have to enable `-U`\n\nor `--umi`\n\noption in the command line, and specify `--umi_loc`\n\nto specify the UMI location, it can be one of:\n\n`index1`\n\nthe first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCC"}
{"chunk_id": "2734403406345745841_4800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ". If the data is PE, this UMI will be used for both read1/read2.`index2`\n\nthe second index is used as UMI. PE data only, this UMI will be used for both read1/read2.`read1`\n\nthe head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.`read2`\n\nthe head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.`per_index`\n\n`index1_index2`\n\nis used as UMI for both read1/read2.`per_read`\n\ndefine`umi1`\n\nas the head of read1, and`umi2`\n\nas the head of read2.`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d"}
{"chunk_id": "2734403406345745841_4960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": ".`umi1_umi2`\n\nis used as UMI for both read1/read2.\n\nIf `--umi_loc`\n\nis specified with `read1`\n\n, `read2`\n\nor `per_read`\n\n, the length of UMI should specified with `--umi_len`\n\n.\n\n`fastp`\n\nwill extract the UMIs, and append them to the first part of read names, so the UMIs will also be presented in SAM/BAM records. If the UMI is in the reads, then it will be shifted from read so that the read will become shorter. If the UMI is in the index, it will be kept.\n\nA prefix can be specified with `--umi_prefix`\n\n. If prefix is specified, an underline will be used to connect it and UMI. For example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S"}
{"chunk_id": "2734403406345745841_5120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " example, UMI=AATTCCGG, prefix=UMI, then the final string presented in the name will be `UMI_AATTCCGG`\n\n.\n\nIf the UMI location is read1/read2/per_read, fastp can skip some bases after UMI to trim the UMI separator and A/T tailing. Specify `--umi_skip`\n\nto enable the number of bases to skip. By default it is not enabled.\n\nThe original read:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101 1:N:0:TATAGCCT+GACCCCCA\nAAAAAAAAGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by"}
{"chunk_id": "2734403406345745841_5280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ACATTTCAGGAGGTCGGGAAA\n+\n6AAAAAEEEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nAfter it's processed with command: `fastp -i R1.fq -o out.R1.fq -U --umi_loc=read1 --umi_len=8`\n\n:\n\n```\n@NS500713:64:HFKJJBGXY:1:11101:1675:1101:AAAAAAAA 1:N:0:TATAGCCT+GACCCCCA\nGCTACTTGGAGTACCAATAATAAAGTGAGCCCACCTTCCTGGTACCCAGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nsh"}
{"chunk_id": "2734403406345745841_5440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "AGACATTTCAGGAGGTCGGGAAA\n+\nEEE/E/EA/E/AEA6EE//AEE66/AAE//EEE/E//E/AA/EEE/A/AEE/EEA//EEEEEEEE6EEAA\n```\n\n\nFor parallel processing of FASTQ files (i.e. alignment in parallel), `fastp`\n\nsupports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number`\n\nor `by limiting lines of each file`\n\n. These two modes cannot be enabled together.\n\nThe file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1`\n\nor `--out2`\n\n, and the width of the prefix is controlled by the `-d`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`"}
{"chunk_id": "2734403406345745841_5600", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_prefix_digits`\n\noption. For example, `--split_prefix_digits=4`\n\n, `--out1=out.fq`\n\n, `--split=3`\n\n, then the output files will be `0001.out.fq`\n\n,`0002.out.fq`\n\n,`0003.out.fq`\n\n\nUse `-s`\n\nor `--split`\n\nto specify how many files you want to have. `fastp`\n\nevaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number.\n\nUse `-S`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1"}
{"chunk_id": "2734403406345745841_5760", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "`\n\nor `--split_by_lines`\n\nto limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines`\n\nsince `fastp`\n\nreads and writes data by blocks (a block = 1000 reads).\n\nOverrepresented sequence analysis is disabled by default, you can specify `-p`\n\nor `--overrepresentation_analysis`\n\nto enable it. For consideration of speed and memory, `fastp`\n\nonly counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ).\n\nBy default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10"}
{"chunk_id": "2734403406345745841_5920", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " specifying `-P`\n\nor `--overrepresentation_sampling`\n\noption. For example, if you set `-P 100`\n\n, only 1/100 reads will be used for counting, and if you set `-P 1`\n\n, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy.\n\n`fastp`\n\nnot only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found.\n\nFor paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge`\n\noption. In this `merging`\n\nmode:\n\n`--merged_out`\n\nshouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more"}
{"chunk_id": "2734403406345745841_6080", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "ouuld be given to specify the file to store merged reads, otherwise you should enable`--stdout`\n\nto stream the merged reads to STDOUT. The merged reads are also filtered.`--out1`\n\nand`--out2`\n\nwill be the reads that cannot be merged successfully, but both pass all the filters.`--unpaired1`\n\nwill be the reads that cannot be merged,`read1`\n\npasses filters but`read2`\n\ndoesn't.`--unpaired2`\n\nwill be the reads that cannot be merged,`read2`\n\npasses filters but`read1`\n\ndoesn't.`--include_unmerged`\n\ncan be enabled to make reads of`--out1`\n\n,`--out2`\n\n,`--unpaired1`\n\nand`--unpaired2`\n\nredirected to`--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24"}
{"chunk_id": "2734403406345745841_6240", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "--merged_out`\n\n. So you will get a single output file. This option is disabled by default.\n\n`--failed_out`\n\ncan still be given to store the reads (either merged or unmerged) failed to passing filters.\n\nIn the output file, a tag like `merged_xxx_yyy`\n\nwill be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, ` @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`\n\nmeans that 150bp are from read1, and 15bp are from read2. `fastp`\n\nprefers the bases in read1 since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f"}
{"chunk_id": "2734403406345745841_6400", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " since they usually have higher quality than read2.\n\nSame as the base correction feature, this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`\n\n, `overlap_diff_limit (default 5)`\n\nand `overlap_diff_percent_limit (default 20%)`\n\n. Please note that the reads should meet these three conditions simultaneously.\n\nFor both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This means if there is a sequencing error or an N base, the read will not be treated as duplicated.\n\nBy default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n"}
{"chunk_id": "2734403406345745841_6560", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication`\n\nto disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`\n\n) option is enabled, then `--dont_eval_duplication`\n\noption is ignored.\n\nfastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy`\n\ncan be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overl"}
{"chunk_id": "2734403406345745841_6720", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " memory usage and more running time. Please refer to following table:\n\n| dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |\n|---|---|---|---|---|---|\n| 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |\n| 2 | 1 | 2G | 2G | fast | |\n| 3 | 2 | 2G | 4G | fast | default for dedup |\n| 4 | 2 | 4G | 8G | fast | |\n| 5 | 2 | 8G | 12G | fast | |\n| 6 | 3 | 8G | 24G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the"}
{"chunk_id": "2734403406345745841_6880", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "G | moderate |\n\nSince `v0.22.0`\n\n, fastp supports deduplication for FASTQ data. Specify `-D`\n\nor `--dedup`\n\nto enable this option. When `--dedup`\n\nis enabled, the `dup_calc_accuracy`\n\nlevel is default to `3`\n\n, and it can be changed to any value of 1 ~ 6.\n\nparallel.py is a script to preprocess all FASTQ files within a folder in parallel. It will automatically couple the paired-end FASTQ files.\n\nThis script will generate an `overall.html`\n\nto present an aggregate summary for all processed FASTQ files.\n\n`python parallel.py -i /path/to/input/folder -o /path/to/output/folder -r /path/to/reports/folder -a '-f 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to"}
{"chunk_id": "2734403406345745841_7040", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " 3 -t 2'`\n\nwhich means to\n\n```\n. process all the FASTQ data in /path/to/input/folder\n. using fastp in PATH\n. with arguments -f 3 and -t 2, which means trimming 3bp in head and 2bp in tail\n. output all clean data to /path/to/output/folder\n. output all HTML and JSON reports to /path/to/reports/folder\n```\n\n\nSee `python parallel.py -h`\n\nfor details.\n\n```\nusage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]\noptions:\n# I/O options\n-i, --in1 read1 input file name (string)\n-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is"}
{"chunk_id": "2734403406345745841_7200", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "-o, --out1 read1 output file name (string [=])\n-I, --in2 read2 input file name (string [=])\n-O, --out2 read2 output file name (string [=])\n--unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=])\n--unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default mode), both unpaired reads will be written to this same file. (string [=])\n--failed_out specify the file to store reads that cannot pass the filters. (string [=])\n--overlapped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail"}
{"chunk_id": "2734403406345745841_7360", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "apped_out for each read pair, output the overlapped region if it has no any mismatched base. (string [=])\n-m, --merge for paired-end input, merge each pair of reads into a single read if they are overlapped. The merged reads will be written to the file given by --merged_out, the unmerged reads will be written to the files specified by --out1 and --out2. The merging mode is disabled by default.\n--merged_out in the merging mode, specify the file name to store merged output, or specify --stdout to stream the merged output (string [=])\n--include_unmerged in the merging mode, write the unmerged or unpaired reads to the file specified by --merge. Disabled by default.\n-6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long"}
{"chunk_id": "2734403406345745841_7520", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33)\n-z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4])\n--stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.\n--stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.\n--interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.\n--reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g"}
{"chunk_id": "2734403406345745841_7680", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " be processed. Default 0 means process all reads. (int [=0])\n--dont_overwrite don't overwrite existing files. Overwritting is allowed by default.\n--fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it.\n# adapter trimming options\n-A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled\n-a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])\n--adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if"}
{"chunk_id": "2734403406345745841_7840", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=])\n--adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=])\n-2, --detect_adapter_for_pe enable adapter detection for PE data to get ultra-clean data. It takes more time to find just a little bit more adapters.\n--allow_gap_overlap_trimming allow up to one gap when trim adapters by overlap analysis for PE data. By default no gap is allowed.\n# global trimming options\n-f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0])\n-t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int"}
{"chunk_id": "2734403406345745841_8000", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "1 trimming how many bases in tail for read1, default is 0 (int [=0])\n-b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0])\n-F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0])\n-T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0])\n-B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [="}
{"chunk_id": "2734403406345745841_8160", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0])\n# duplication evaluation and deduplication\n-D, --dedup enable deduplication to drop the duplicated reads/pairs\n--dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0])\n--dont_eval_duplication don't evaluate duplication rate to save time and use less memory.\n# polyG tail trimming, useful for NextSeq/NovaSeq data\n-g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair"}
{"chunk_id": "2734403406345745841_8320", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n--poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10])\n-G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data\n# polyX tail trimming\n-x, --trim_poly_x enable polyX trimming in 3' ends.\n--poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10])\n# per read cutting by quality options\n-5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means "}
{"chunk_id": "2734403406345745841_8480", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " its mean quality < threshold, stop otherwise.\n-3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.\n-r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.\n-W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])\n-M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap"}
{"chunk_id": "2734403406345745841_8640", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " [=20])\n--cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4])\n--cut_front_mean_quality the mean quality requirement option for cut_front, default to cut_mean_quality if not specified (int [=20])\n--cut_tail_window_size the window size option of cut_tail, default to cut_window_size if not specified (int [=4])\n--cut_tail_mean_quality the mean quality requirement option for cut_tail, default to cut_mean_quality if not specified (int [=20])\n--cut_right_window_size the window size option of cut_right, default to cut_window_size if not specified (int [=4])\n--cut_right_mean_quality the mean quality requirement option for cut_right, default to cut_mean_quality if not specified (int [=20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none ("}
{"chunk_id": "2734403406345745841_8800", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "20])\n# quality filtering options\n-Q, --disable_quality_filtering quality filtering is enabled by default. If this option is specified, quality filtering is disabled\n-q, --qualified_quality_phred the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])\n-u, --unqualified_percent_limit how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])\n-n, --n_base_limit if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])\n-e, --average_qual if one read's average quality score <avg_qual, then this read/pair is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default"}
{"chunk_id": "2734403406345745841_8960", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " is discarded. Default 0 means no requirement (int [=0])\n# length filtering options\n-L, --disable_length_filtering length filtering is enabled by default. If this option is specified, length filtering is disabled\n-l, --length_required reads shorter than length_required will be discarded, default is 15. (int [=15])\n--length_limit reads longer than length_limit will be discarded, default 0 means no limitation. (int [=0])\n# low complexity filtering\n-y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).\n-Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split"}
{"chunk_id": "2734403406345745841_9120", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "30% complexity is required. (int [=30])\n# filter reads with unwanted indexes (to remove possible contamination)\n--filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=])\n--filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=])\n--filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0])\n# base correction by overlap analysis options\n-c, --correction enable base correction in overlapped regions (only for PE data), default is disabled\n--overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "2734403406345745841_9280", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": " analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30])\n--overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5])\n--overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20])\n# UMI processing\n-U, --umi enable unique molecular identifier (UMI) preprocessing\n--umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
{"chunk_id": "2734403406345745841_9440", "url": "https://github.com/OpenGene/fastp", "char_start": null, "char_end": null, "text": "string [=])\n--umi_len if the UMI is in read1/read2, its length should be provided (int [=0])\n--umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=])\n--umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0])\n# overrepresented sequence analysis\n-p, --overrepresentation_analysis enable overrepresented sequence analysis.\n-P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20])\n# reporting options\n-j, --json the json format report file name (string [=fastp.json])\n-h, --html the html format report file name (string [=fastp.html])\n-R, --report_title should be quoted with ' or \", default is \"fastp report\" (string [=fastp report])\n# threading options\n-w, --thread worker thread number, default is 3 (int [=3])\n# output splitting options\n-s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0])\n-S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0])\n-d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4])\n# help\n-?, --help print this message\n```"}
